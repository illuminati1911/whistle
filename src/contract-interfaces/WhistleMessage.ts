/* GENERATED BY TYPECHAIN VER. 0.1.2 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  // IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class WhistleMessage extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "receiver", type: "address" }],
        name: "getNumberOfMessages",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "receiver", type: "address" },
          { name: "id", type: "uint256" }
        ],
        name: "getMessage",
        outputs: [
          { name: "", type: "address" },
          { name: "", type: "string" },
          { name: "", type: "string" },
          { name: "", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "receiver", type: "address" },
          { name: "title", type: "string" },
          { name: "message", type: "string" }
        ],
        name: "addMessage",
        outputs: [
          { name: "", type: "address" },
          { name: "", type: "string" },
          { name: "", type: "string" },
          { name: "", type: "uint256" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<WhistleMessage> {
    const contract = new WhistleMessage(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public getNumberOfMessages(receiver: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getNumberOfMessages, [
      receiver.toString()
    ]);
  }
  public getMessage(
    receiver: BigNumber | string,
    id: BigNumber | number
  ): Promise<[string, string, string, BigNumber]> {
    return promisify(this.rawWeb3Contract.getMessage, [
      receiver.toString(),
      id.toString()
    ]);
  }

  public addMessageTx(
    receiver: BigNumber | string,
    title: string,
    message: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "addMessage", [
      receiver.toString(),
      title.toString(),
      message.toString()
    ]);
  }
}
